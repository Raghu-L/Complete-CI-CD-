pipeline{
    agent any

    parameters{
        choice(name : 'action', choices: 'create\ndestroy\ndestroycluster', description: 'Create/Update or Destroy the EKS cluster')

        string(name: 'cluster',defaultValue: 'demo-cluster', description: 'eEKs cluster name')
        string(name: 'region',defaultValue: 'us-east-1', description: 'EKs cluster region')
    }

    environment{
        ACCESS_KEY =  credentials('aws_aceess_key_id')   //Create secret using jenkins 
        SECRET_KEY =  credentials('aws_secret_acsess_key')     //Create secret using jenkins 
    }


    stages{
        stage('Git Checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/Raghu-L/Complete-CI-CD-.git'
            }
        }

        stage('eks connect'){
            steps{
                sh """

                 aws configure set aws_aceess_key_id "$ACCESS_KEY"
                 aws configure set aws_secret_acsess_key "$SECRET_KEY"
                 aws configure set region "$(parms.region)"

                 aws eks --region $(parms.region) update-kubeconfig --name $(parms.cluster)
                 """;

            }
        }

        stage('eks deployments'){
            when{ expression{params.action == 'create'}}
            steps{
                script{
                    def apply = false
                    try {
                            input message : 'Do you want to intitate the Deployment', ok: 'Ready to apply Config'
                            apply = true
                    }
                    catch(err){
                        apply = false
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if(apply){
                        sh """
                            kubectl apply -f .
                            """;
                    }
                }
            }
        }

        stage('Delete Deployment'){
             when {expression{params.action == 'destroy'}}

             steps{
                script{
                    def destroy = false

                    try{
                        input message : 'Please confirm to delete the deployments', ok: 'Ready to Destroy'
                        destroy = true
                    }
                    catch(err){
                        destroy = false 
                        CurrentBuild.result = 'UNSTABLE'
                    }

                    if(destroy){
                            sh """
                                kubectl delete -f .
                            """;
                    }
                }
             }

        }
    }

}